.spotlights>section>.image:before{opacity:0!important}.c-wrapper>.inner,.spotlights>section>.content>.inner{-webkit-transform:none!important;transform:none!important;opacity:1!important}.sidebar>.inner,.sidebar nav>ul>li{opacity:1!important}.sidebar nav>ul>li{-webkit-transform:none!important;transform:none!important}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
