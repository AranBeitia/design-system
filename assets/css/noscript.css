.spotlights>section>.image:before{opacity:0!important}.c-wrapper>.inner,.spotlights>section>.content>.inner{-webkit-transform:none!important;transform:none!important;opacity:1!important}.sidebar>.inner,.sidebar nav>ul>li{opacity:1!important}.sidebar nav>ul>li{-webkit-transform:none!important;transform:none!important}
/*# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vc2NyaXB0LnNjc3MiLCJ0b29scy9saWJzL192ZW5kb3Iuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFlQyxrQ0FJSSxtQkFBcUIsQ0FlekIsc0RDMFRTLGdDQUF3QixDQUF4Qix3QkFBd0IsQ0RsVTdCLG1CQ2tVNkIsQ0RqVGpDLG1DQUVFLG1CQU91QixDQVR6QixtQkNpVFMsZ0NBQXdCLENBQXhCLHdCRHhTZ0IiLCJmaWxlIjoibm9zY3JpcHQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiQGltcG9ydCAndG9vbHMvbGlicy92YXJzJztcclxuQGltcG9ydCAndG9vbHMvbGlicy9mdW5jdGlvbnMnO1xyXG5AaW1wb3J0ICd0b29scy9saWJzL21peGlucyc7XHJcbkBpbXBvcnQgJ3Rvb2xzL2xpYnMvdmVuZG9yJztcclxuQGltcG9ydCAndG9vbHMvbGlicy9icmVha3BvaW50cyc7XHJcbkBpbXBvcnQgJ3Rvb2xzL2xpYnMvaHRtbC1ncmlkJztcclxuXHJcbi8qXHJcblx0SHlwZXJzcGFjZSBieSBIVE1MNSBVUFxyXG5cdGh0bWw1dXAubmV0IHwgQGFqbGtuXHJcblx0RnJlZSBmb3IgcGVyc29uYWwgYW5kIGNvbW1lcmNpYWwgdXNlIHVuZGVyIHRoZSBDQ0EgMy4wIGxpY2Vuc2UgKGh0bWw1dXAubmV0L2xpY2Vuc2UpXHJcbiovXHJcblxyXG4vKiBTcG90bGlnaHRzICovXHJcblxyXG5cdC5zcG90bGlnaHRzIHtcclxuXHRcdD4gc2VjdGlvbiB7XHJcblx0XHRcdD4gLmltYWdlIHtcclxuXHRcdFx0XHQmOmJlZm9yZSB7XHJcblx0XHRcdFx0XHRvcGFjaXR5OiAwICFpbXBvcnRhbnQ7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQ+IC5jb250ZW50IHtcclxuXHRcdFx0XHQ+IC5pbm5lciB7XHJcblx0XHRcdFx0XHRAaW5jbHVkZSB2ZW5kb3IoJ3RyYW5zZm9ybScsICdub25lICFpbXBvcnRhbnQnKTtcclxuXHRcdFx0XHRcdG9wYWNpdHk6IDEgIWltcG9ydGFudDtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblxyXG4vKiBXcmFwcGVyICovXHJcblxyXG5cdC5jLXdyYXBwZXIge1xyXG5cdFx0PiAuaW5uZXIge1xyXG5cdFx0XHRvcGFjaXR5OiAxICFpbXBvcnRhbnQ7XHJcblx0XHRcdEBpbmNsdWRlIHZlbmRvcigndHJhbnNmb3JtJywgJ25vbmUgIWltcG9ydGFudCcpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcbi8qIFNpZGViYXIgKi9cclxuXHJcblx0LnNpZGViYXIge1xyXG5cdFx0PiAuaW5uZXIge1xyXG5cdFx0XHRvcGFjaXR5OiAxICFpbXBvcnRhbnQ7XHJcblx0XHR9XHJcblxyXG5cdFx0bmF2IHtcclxuXHRcdFx0PiB1bCB7XHJcblx0XHRcdFx0PiBsaSB7XHJcblx0XHRcdFx0XHRAaW5jbHVkZSB2ZW5kb3IoJ3RyYW5zZm9ybScsICdub25lICFpbXBvcnRhbnQnKTtcclxuXHRcdFx0XHRcdG9wYWNpdHk6IDEgIWltcG9ydGFudDtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9IiwiLy8gdmVuZG9yLnNjc3MgdjEuMCB8IEBhamxrbiB8IE1JVCBsaWNlbnNlZCAqL1xyXG5cclxuLy8gVmFycy5cclxuXHJcblx0Ly8vIFZlbmRvciBwcmVmaXhlcy5cclxuXHQvLy8gQHZhciB7bGlzdH1cclxuXHQkdmVuZG9yLXByZWZpeGVzOiAoXHJcblx0XHQnLW1vei0nLFxyXG5cdFx0Jy13ZWJraXQtJyxcclxuXHRcdCctbXMtJyxcclxuXHRcdCcnXHJcblx0KTtcclxuXHJcblx0Ly8vIFByb3BlcnRpZXMgdGhhdCBzaG91bGQgYmUgdmVuZG9yaXplZC5cclxuXHQvLy8gRGF0YSB2aWEgY2FuaXVzZS5jb20sIGdpdGh1Yi5jb20vcG9zdGNzcy9hdXRvcHJlZml4ZXIsIGFuZCBkZXZlbG9wZXIubW96aWxsYS5vcmdcclxuXHQvLy8gQHZhciB7bGlzdH1cclxuXHQkdmVuZG9yLXByb3BlcnRpZXM6IChcclxuXHJcblx0XHQvLyBBbmltYXRpb24uXHJcblx0XHRcdCdhbmltYXRpb24nLFxyXG5cdFx0XHQnYW5pbWF0aW9uLWRlbGF5JyxcclxuXHRcdFx0J2FuaW1hdGlvbi1kaXJlY3Rpb24nLFxyXG5cdFx0XHQnYW5pbWF0aW9uLWR1cmF0aW9uJyxcclxuXHRcdFx0J2FuaW1hdGlvbi1maWxsLW1vZGUnLFxyXG5cdFx0XHQnYW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudCcsXHJcblx0XHRcdCdhbmltYXRpb24tbmFtZScsXHJcblx0XHRcdCdhbmltYXRpb24tcGxheS1zdGF0ZScsXHJcblx0XHRcdCdhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uJyxcclxuXHJcblx0XHQvLyBBcHBlYXJhbmNlLlxyXG5cdFx0XHQnYXBwZWFyYW5jZScsXHJcblxyXG5cdFx0Ly8gQmFja2Ryb3AgZmlsdGVyLlxyXG5cdFx0XHQnYmFja2Ryb3AtZmlsdGVyJyxcclxuXHJcblx0XHQvLyBCYWNrZ3JvdW5kIGltYWdlIG9wdGlvbnMuXHJcblx0XHRcdCdiYWNrZ3JvdW5kLWNsaXAnLFxyXG5cdFx0XHQnYmFja2dyb3VuZC1vcmlnaW4nLFxyXG5cdFx0XHQnYmFja2dyb3VuZC1zaXplJyxcclxuXHJcblx0XHQvLyBCb3ggc2l6aW5nLlxyXG5cdFx0XHQnYm94LXNpemluZycsXHJcblxyXG5cdFx0Ly8gQ2xpcCBwYXRoLlxyXG5cdFx0XHQnY2xpcC1wYXRoJyxcclxuXHJcblx0XHQvLyBGaWx0ZXIgZWZmZWN0cy5cclxuXHRcdFx0J2ZpbHRlcicsXHJcblxyXG5cdFx0Ly8gRmxleGJveC5cclxuXHRcdFx0J2FsaWduLWNvbnRlbnQnLFxyXG5cdFx0XHQnYWxpZ24taXRlbXMnLFxyXG5cdFx0XHQnYWxpZ24tc2VsZicsXHJcblx0XHRcdCdmbGV4JyxcclxuXHRcdFx0J2ZsZXgtYmFzaXMnLFxyXG5cdFx0XHQnZmxleC1kaXJlY3Rpb24nLFxyXG5cdFx0XHQnZmxleC1mbG93JyxcclxuXHRcdFx0J2ZsZXgtZ3JvdycsXHJcblx0XHRcdCdmbGV4LXNocmluaycsXHJcblx0XHRcdCdmbGV4LXdyYXAnLFxyXG5cdFx0XHQnanVzdGlmeS1jb250ZW50JyxcclxuXHRcdFx0J29yZGVyJyxcclxuXHJcblx0XHQvLyBGb250IGZlYXR1cmUuXHJcblx0XHRcdCdmb250LWZlYXR1cmUtc2V0dGluZ3MnLFxyXG5cdFx0XHQnZm9udC1sYW5ndWFnZS1vdmVycmlkZScsXHJcblx0XHRcdCdmb250LXZhcmlhbnQtbGlnYXR1cmVzJyxcclxuXHJcblx0XHQvLyBGb250IGtlcm5pbmcuXHJcblx0XHRcdCdmb250LWtlcm5pbmcnLFxyXG5cclxuXHRcdC8vIEZyYWdtZW50ZWQgYm9yZGVycyBhbmQgYmFja2dyb3VuZHMuXHJcblx0XHRcdCdib3gtZGVjb3JhdGlvbi1icmVhaycsXHJcblxyXG5cdFx0Ly8gR3JpZCBsYXlvdXQuXHJcblx0XHRcdCdncmlkLWNvbHVtbicsXHJcblx0XHRcdCdncmlkLWNvbHVtbi1hbGlnbicsXHJcblx0XHRcdCdncmlkLWNvbHVtbi1lbmQnLFxyXG5cdFx0XHQnZ3JpZC1jb2x1bW4tc3RhcnQnLFxyXG5cdFx0XHQnZ3JpZC1yb3cnLFxyXG5cdFx0XHQnZ3JpZC1yb3ctYWxpZ24nLFxyXG5cdFx0XHQnZ3JpZC1yb3ctZW5kJyxcclxuXHRcdFx0J2dyaWQtcm93LXN0YXJ0JyxcclxuXHRcdFx0J2dyaWQtdGVtcGxhdGUtY29sdW1ucycsXHJcblx0XHRcdCdncmlkLXRlbXBsYXRlLXJvd3MnLFxyXG5cclxuXHRcdC8vIEh5cGhlbnMuXHJcblx0XHRcdCdoeXBoZW5zJyxcclxuXHRcdFx0J3dvcmQtYnJlYWsnLFxyXG5cclxuXHRcdC8vIE1hc2tzLlxyXG5cdFx0XHQnbWFzaycsXHJcblx0XHRcdCdtYXNrLWJvcmRlcicsXHJcblx0XHRcdCdtYXNrLWJvcmRlci1vdXRzZXQnLFxyXG5cdFx0XHQnbWFzay1ib3JkZXItcmVwZWF0JyxcclxuXHRcdFx0J21hc2stYm9yZGVyLXNsaWNlJyxcclxuXHRcdFx0J21hc2stYm9yZGVyLXNvdXJjZScsXHJcblx0XHRcdCdtYXNrLWJvcmRlci13aWR0aCcsXHJcblx0XHRcdCdtYXNrLWNsaXAnLFxyXG5cdFx0XHQnbWFzay1jb21wb3NpdGUnLFxyXG5cdFx0XHQnbWFzay1pbWFnZScsXHJcblx0XHRcdCdtYXNrLW9yaWdpbicsXHJcblx0XHRcdCdtYXNrLXBvc2l0aW9uJyxcclxuXHRcdFx0J21hc2stcmVwZWF0JyxcclxuXHRcdFx0J21hc2stc2l6ZScsXHJcblxyXG5cdFx0Ly8gTXVsdGljb2x1bW4uXHJcblx0XHRcdCdicmVhay1hZnRlcicsXHJcblx0XHRcdCdicmVhay1iZWZvcmUnLFxyXG5cdFx0XHQnYnJlYWstaW5zaWRlJyxcclxuXHRcdFx0J2NvbHVtbi1jb3VudCcsXHJcblx0XHRcdCdjb2x1bW4tZmlsbCcsXHJcblx0XHRcdCdjb2x1bW4tZ2FwJyxcclxuXHRcdFx0J2NvbHVtbi1ydWxlJyxcclxuXHRcdFx0J2NvbHVtbi1ydWxlLWNvbG9yJyxcclxuXHRcdFx0J2NvbHVtbi1ydWxlLXN0eWxlJyxcclxuXHRcdFx0J2NvbHVtbi1ydWxlLXdpZHRoJyxcclxuXHRcdFx0J2NvbHVtbi1zcGFuJyxcclxuXHRcdFx0J2NvbHVtbi13aWR0aCcsXHJcblx0XHRcdCdjb2x1bW5zJyxcclxuXHJcblx0XHQvLyBPYmplY3QgZml0LlxyXG5cdFx0XHQnb2JqZWN0LWZpdCcsXHJcblx0XHRcdCdvYmplY3QtcG9zaXRpb24nLFxyXG5cclxuXHRcdC8vIFJlZ2lvbnMuXHJcblx0XHRcdCdmbG93LWZyb20nLFxyXG5cdFx0XHQnZmxvdy1pbnRvJyxcclxuXHRcdFx0J3JlZ2lvbi1mcmFnbWVudCcsXHJcblxyXG5cdFx0Ly8gU2Nyb2xsIHNuYXAgcG9pbnRzLlxyXG5cdFx0XHQnc2Nyb2xsLXNuYXAtY29vcmRpbmF0ZScsXHJcblx0XHRcdCdzY3JvbGwtc25hcC1kZXN0aW5hdGlvbicsXHJcblx0XHRcdCdzY3JvbGwtc25hcC1wb2ludHMteCcsXHJcblx0XHRcdCdzY3JvbGwtc25hcC1wb2ludHMteScsXHJcblx0XHRcdCdzY3JvbGwtc25hcC10eXBlJyxcclxuXHJcblx0XHQvLyBTaGFwZXMuXHJcblx0XHRcdCdzaGFwZS1pbWFnZS10aHJlc2hvbGQnLFxyXG5cdFx0XHQnc2hhcGUtbWFyZ2luJyxcclxuXHRcdFx0J3NoYXBlLW91dHNpZGUnLFxyXG5cclxuXHRcdC8vIFRhYiBzaXplLlxyXG5cdFx0XHQndGFiLXNpemUnLFxyXG5cclxuXHRcdC8vIFRleHQgYWxpZ24gbGFzdC5cclxuXHRcdFx0J3RleHQtYWxpZ24tbGFzdCcsXHJcblxyXG5cdFx0Ly8gVGV4dCBkZWNvcmF0aW9uLlxyXG5cdFx0XHQndGV4dC1kZWNvcmF0aW9uLWNvbG9yJyxcclxuXHRcdFx0J3RleHQtZGVjb3JhdGlvbi1saW5lJyxcclxuXHRcdFx0J3RleHQtZGVjb3JhdGlvbi1za2lwJyxcclxuXHRcdFx0J3RleHQtZGVjb3JhdGlvbi1zdHlsZScsXHJcblxyXG5cdFx0Ly8gVGV4dCBlbXBoYXNpcy5cclxuXHRcdFx0J3RleHQtZW1waGFzaXMnLFxyXG5cdFx0XHQndGV4dC1lbXBoYXNpcy1jb2xvcicsXHJcblx0XHRcdCd0ZXh0LWVtcGhhc2lzLXBvc2l0aW9uJyxcclxuXHRcdFx0J3RleHQtZW1waGFzaXMtc3R5bGUnLFxyXG5cclxuXHRcdC8vIFRleHQgc2l6ZSBhZGp1c3QuXHJcblx0XHRcdCd0ZXh0LXNpemUtYWRqdXN0JyxcclxuXHJcblx0XHQvLyBUZXh0IHNwYWNpbmcuXHJcblx0XHRcdCd0ZXh0LXNwYWNpbmcnLFxyXG5cclxuXHRcdC8vIFRleHQgdHJhbnNmb3JtLlxyXG5cdFx0XHQndGV4dC10cmFuc2Zvcm0nLFxyXG5cclxuXHRcdC8vIFRyYW5zZm9ybS5cclxuXHRcdFx0J3RyYW5zZm9ybScsXHJcblx0XHRcdCd0cmFuc2Zvcm0tb3JpZ2luJyxcclxuXHJcblx0XHQvLyBUcmFuc2Zvcm0gM0QuXHJcblx0XHRcdCdiYWNrZmFjZS12aXNpYmlsaXR5JyxcclxuXHRcdFx0J3BlcnNwZWN0aXZlJyxcclxuXHRcdFx0J3BlcnNwZWN0aXZlLW9yaWdpbicsXHJcblx0XHRcdCd0cmFuc2Zvcm0tc3R5bGUnLFxyXG5cclxuXHRcdC8vIFRyYW5zaXRpb24uXHJcblx0XHRcdCd0cmFuc2l0aW9uJyxcclxuXHRcdFx0J3RyYW5zaXRpb24tZGVsYXknLFxyXG5cdFx0XHQndHJhbnNpdGlvbi1kdXJhdGlvbicsXHJcblx0XHRcdCd0cmFuc2l0aW9uLXByb3BlcnR5JyxcclxuXHRcdFx0J3RyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uJyxcclxuXHJcblx0XHQvLyBVbmljb2RlIGJpZGkuXHJcblx0XHRcdCd1bmljb2RlLWJpZGknLFxyXG5cclxuXHRcdC8vIFVzZXIgc2VsZWN0LlxyXG5cdFx0XHQndXNlci1zZWxlY3QnLFxyXG5cclxuXHRcdC8vIFdyaXRpbmcgbW9kZS5cclxuXHRcdFx0J3dyaXRpbmctbW9kZScsXHJcblxyXG5cdCk7XHJcblxyXG5cdC8vLyBWYWx1ZXMgdGhhdCBzaG91bGQgYmUgdmVuZG9yaXplZC5cclxuXHQvLy8gRGF0YSB2aWEgY2FuaXVzZS5jb20sIGdpdGh1Yi5jb20vcG9zdGNzcy9hdXRvcHJlZml4ZXIsIGFuZCBkZXZlbG9wZXIubW96aWxsYS5vcmdcclxuXHQvLy8gQHZhciB7bGlzdH1cclxuXHQkdmVuZG9yLXZhbHVlczogKFxyXG5cclxuXHRcdC8vIENyb3NzIGZhZGUuXHJcblx0XHRcdCdjcm9zcy1mYWRlJyxcclxuXHJcblx0XHQvLyBFbGVtZW50IGZ1bmN0aW9uLlxyXG5cdFx0XHQnZWxlbWVudCcsXHJcblxyXG5cdFx0Ly8gRmlsdGVyIGZ1bmN0aW9uLlxyXG5cdFx0XHQnZmlsdGVyJyxcclxuXHJcblx0XHQvLyBGbGV4Ym94LlxyXG5cdFx0XHQnZmxleCcsXHJcblx0XHRcdCdpbmxpbmUtZmxleCcsXHJcblxyXG5cdFx0Ly8gR3JhYiBjdXJzb3JzLlxyXG5cdFx0XHQnZ3JhYicsXHJcblx0XHRcdCdncmFiYmluZycsXHJcblxyXG5cdFx0Ly8gR3JhZGllbnRzLlxyXG5cdFx0XHQnbGluZWFyLWdyYWRpZW50JyxcclxuXHRcdFx0J3JlcGVhdGluZy1saW5lYXItZ3JhZGllbnQnLFxyXG5cdFx0XHQncmFkaWFsLWdyYWRpZW50JyxcclxuXHRcdFx0J3JlcGVhdGluZy1yYWRpYWwtZ3JhZGllbnQnLFxyXG5cclxuXHRcdC8vIEdyaWQgbGF5b3V0LlxyXG5cdFx0XHQnZ3JpZCcsXHJcblx0XHRcdCdpbmxpbmUtZ3JpZCcsXHJcblxyXG5cdFx0Ly8gSW1hZ2Ugc2V0LlxyXG5cdFx0XHQnaW1hZ2Utc2V0JyxcclxuXHJcblx0XHQvLyBJbnRyaW5zaWMgd2lkdGguXHJcblx0XHRcdCdtYXgtY29udGVudCcsXHJcblx0XHRcdCdtaW4tY29udGVudCcsXHJcblx0XHRcdCdmaXQtY29udGVudCcsXHJcblx0XHRcdCdmaWxsJyxcclxuXHRcdFx0J2ZpbGwtYXZhaWxhYmxlJyxcclxuXHRcdFx0J3N0cmV0Y2gnLFxyXG5cclxuXHRcdC8vIFN0aWNreSBwb3NpdGlvbi5cclxuXHRcdFx0J3N0aWNreScsXHJcblxyXG5cdFx0XHQvLyBVcHBlcmNhc2UgVW5kZXJjYXNlLlxyXG5cdFx0XHQndXBwZXJjYXNlJyxcclxuXHRcdFx0J3VuZGVyY2FzZScsXHJcblxyXG5cdFx0Ly8gVHJhbnNmb3JtLlxyXG5cdFx0XHQndHJhbnNmb3JtJyxcclxuXHJcblx0XHQvLyBab29tIGN1cnNvcnMuXHJcblx0XHRcdCd6b29tLWluJyxcclxuXHRcdFx0J3pvb20tb3V0JyxcclxuXHJcblx0KTtcclxuXHJcbi8vIEZ1bmN0aW9ucy5cclxuXHJcblx0Ly8vIFJlbW92ZXMgYSBzcGVjaWZpYyBpdGVtIGZyb20gYSBsaXN0LlxyXG5cdC8vLyBAYXV0aG9yIEh1Z28gR2lyYXVkZWxcclxuXHQvLy8gQHBhcmFtIHtsaXN0fSAkbGlzdCBMaXN0LlxyXG5cdC8vLyBAcGFyYW0ge2ludGVnZXJ9ICRpbmRleCBJbmRleC5cclxuXHQvLy8gQHJldHVybiB7bGlzdH0gVXBkYXRlZCBsaXN0LlxyXG5cdEBmdW5jdGlvbiByZW1vdmUtbnRoKCRsaXN0LCAkaW5kZXgpIHtcclxuXHRcdCRyZXN1bHQ6IG51bGw7XHJcblxyXG5cdFx0QGlmIHR5cGUtb2YoJGluZGV4KSAhPSBudW1iZXIge1xyXG5cdFx0XHRAd2FybiBcIiRpbmRleDogI3txdW90ZSgkaW5kZXgpfSBpcyBub3QgYSBudW1iZXIgZm9yIGByZW1vdmUtbnRoYC5cIjtcclxuXHRcdH1cclxuXHRcdEBlbHNlIGlmICRpbmRleCA9PSAwIHtcclxuXHRcdFx0QHdhcm4gXCJMaXN0IGluZGV4IDAgbXVzdCBiZSBhIG5vbi16ZXJvIGludGVnZXIgZm9yIGByZW1vdmUtbnRoYC5cIjtcclxuXHRcdH1cclxuXHRcdEBlbHNlIGlmIGFicygkaW5kZXgpID4gbGVuZ3RoKCRsaXN0KSB7XHJcblx0XHRcdEB3YXJuIFwiTGlzdCBpbmRleCBpcyAjeyRpbmRleH0gYnV0IGxpc3QgaXMgb25seSAje2xlbmd0aCgkbGlzdCl9IGl0ZW0gbG9uZyBmb3IgYHJlbW92ZS1udGhgLlwiO1xyXG5cdFx0fVxyXG5cdFx0QGVsc2Uge1xyXG5cdFx0XHQkcmVzdWx0OiAoKTtcclxuXHRcdFx0JGluZGV4OiBpZigkaW5kZXggPCAwLCBsZW5ndGgoJGxpc3QpICsgJGluZGV4ICsgMSwgJGluZGV4KTtcclxuXHJcblx0XHRcdEBmb3IgJGkgZnJvbSAxIHRocm91Z2ggbGVuZ3RoKCRsaXN0KSB7XHJcblx0XHRcdFx0QGlmICRpICE9ICRpbmRleCB7XHJcblx0XHRcdFx0XHQkcmVzdWx0OiBhcHBlbmQoJHJlc3VsdCwgbnRoKCRsaXN0LCAkaSkpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdEByZXR1cm4gJHJlc3VsdDtcclxuXHR9XHJcblxyXG5cdC8vLyBSZXBsYWNlcyBhIHN1YnN0cmluZyB3aXRoaW4gYW5vdGhlciBzdHJpbmcuXHJcblx0Ly8vIEBhdXRob3IgSHVnbyBHaXJhdWRlbFxyXG5cdC8vLyBAcGFyYW0ge3N0cmluZ30gJHN0cmluZyBTdHJpbmcuXHJcblx0Ly8vIEBwYXJhbSB7c3RyaW5nfSAkc2VhcmNoIFN1YnN0cmluZy5cclxuXHQvLy8gQHBhcmFtIHtzdHJpbmd9ICRyZXBsYWNlIFJlcGxhY2VtZW50LlxyXG5cdC8vLyBAcmV0dXJuIHtzdHJpbmd9IFVwZGF0ZWQgc3RyaW5nLlxyXG5cdEBmdW5jdGlvbiBzdHItcmVwbGFjZSgkc3RyaW5nLCAkc2VhcmNoLCAkcmVwbGFjZTogJycpIHtcclxuXHRcdCRpbmRleDogc3RyLWluZGV4KCRzdHJpbmcsICRzZWFyY2gpO1xyXG5cdFx0QGlmICRpbmRleCB7XHJcblx0XHRcdEByZXR1cm4gc3RyLXNsaWNlKCRzdHJpbmcsIDEsICRpbmRleCAtIDEpICsgJHJlcGxhY2UgKyBzdHItcmVwbGFjZShzdHItc2xpY2UoJHN0cmluZywgJGluZGV4ICsgc3RyLWxlbmd0aCgkc2VhcmNoKSksICRzZWFyY2gsICRyZXBsYWNlKTtcclxuXHRcdH1cclxuXHJcblx0XHRAcmV0dXJuICRzdHJpbmc7XHJcblx0fVxyXG5cclxuXHQvLy8gUmVwbGFjZXMgYSBzdWJzdHJpbmcgd2l0aGluIGVhY2ggc3RyaW5nIGluIGEgbGlzdC5cclxuXHQvLy8gQHBhcmFtIHtsaXN0fSAkc3RyaW5ncyBMaXN0IG9mIHN0cmluZ3MuXHJcblx0Ly8vIEBwYXJhbSB7c3RyaW5nfSAkc2VhcmNoIFN1YnN0cmluZy5cclxuXHQvLy8gQHBhcmFtIHtzdHJpbmd9ICRyZXBsYWNlIFJlcGxhY2VtZW50LlxyXG5cdC8vLyBAcmV0dXJuIHtsaXN0fSBVcGRhdGVkIGxpc3Qgb2Ygc3RyaW5ncy5cclxuXHRAZnVuY3Rpb24gc3RyLXJlcGxhY2UtYWxsKCRzdHJpbmdzLCAkc2VhcmNoLCAkcmVwbGFjZTogJycpIHtcclxuXHRcdEBlYWNoICRzdHJpbmcgaW4gJHN0cmluZ3Mge1xyXG5cdFx0XHQkc3RyaW5nczogc2V0LW50aCgkc3RyaW5ncywgaW5kZXgoJHN0cmluZ3MsICRzdHJpbmcpLCBzdHItcmVwbGFjZSgkc3RyaW5nLCAkc2VhcmNoLCAkcmVwbGFjZSkpO1xyXG5cdFx0fVxyXG5cclxuXHRcdEByZXR1cm4gJHN0cmluZ3M7XHJcblx0fVxyXG5cclxuLy8gTWl4aW5zLlxyXG5cclxuXHQvLy8gV3JhcHMgQGNvbnRlbnQgaW4gdmVuZG9yaXplZCBrZXlmcmFtZSBibG9ja3MuXHJcblx0Ly8vIEBwYXJhbSB7c3RyaW5nfSAkbmFtZSBOYW1lLlxyXG5cdEBtaXhpbiBrZXlmcmFtZXMoJG5hbWUpIHtcclxuXHRcdEAtbW96LWtleWZyYW1lcyAjeyRuYW1lfSB7IEBjb250ZW50OyB9XHJcblx0XHRALXdlYmtpdC1rZXlmcmFtZXMgI3skbmFtZX0geyBAY29udGVudDsgfVxyXG5cdFx0QC1tcy1rZXlmcmFtZXMgI3skbmFtZX0geyBAY29udGVudDsgfVxyXG5cdFx0QGtleWZyYW1lcyAjeyRuYW1lfSB7IEBjb250ZW50OyB9XHJcblx0fVxyXG5cclxuXHQvLy8gVmVuZG9yaXplcyBhIGRlY2xhcmF0aW9uJ3MgcHJvcGVydHkgYW5kL29yIHZhbHVlKHMpLlxyXG5cdC8vLyBAcGFyYW0ge3N0cmluZ30gJHByb3BlcnR5IFByb3BlcnR5LlxyXG5cdC8vLyBAcGFyYW0ge21peGVkfSAkdmFsdWUgU3RyaW5nL2xpc3Qgb2YgdmFsdWUocykuXHJcblx0QG1peGluIHZlbmRvcigkcHJvcGVydHksICR2YWx1ZSkge1xyXG5cdFx0Ly8gRGV0ZXJtaW5lIGlmIHByb3BlcnR5IHNob3VsZCBleHBhbmQuXHJcblx0XHRcdCRleHBhbmRQcm9wZXJ0eTogaW5kZXgoJHZlbmRvci1wcm9wZXJ0aWVzLCAkcHJvcGVydHkpO1xyXG5cdFx0Ly8gRGV0ZXJtaW5lIGlmIHZhbHVlIHNob3VsZCBleHBhbmQgKGFuZCBpZiBzbywgYWRkICctcHJlZml4LScgcGxhY2Vob2xkZXIpLlxyXG5cdFx0XHQkZXhwYW5kVmFsdWU6IGZhbHNlO1xyXG5cdFx0XHRAZWFjaCAkeCBpbiAkdmFsdWUge1xyXG5cdFx0XHRcdEBlYWNoICR5IGluICR2ZW5kb3ItdmFsdWVzIHtcclxuXHRcdFx0XHRcdEBpZiAkeSA9PSBzdHItc2xpY2UoJHgsIDEsIHN0ci1sZW5ndGgoJHkpKSB7XHJcblx0XHRcdFx0XHRcdCR2YWx1ZTogc2V0LW50aCgkdmFsdWUsIGluZGV4KCR2YWx1ZSwgJHgpLCAnLXByZWZpeC0nICsgJHgpO1xyXG5cdFx0XHRcdFx0XHQkZXhwYW5kVmFsdWU6IHRydWU7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0Ly8gRXhwYW5kIHByb3BlcnR5P1xyXG5cdFx0XHRAaWYgJGV4cGFuZFByb3BlcnR5IHtcclxuICAgICAgICBAZWFjaCAkdmVuZG9yIGluICR2ZW5kb3ItcHJlZml4ZXMge1xyXG4gICAgICAgICAgI3skdmVuZG9yfSN7JHByb3BlcnR5fTogI3tzdHItcmVwbGFjZS1hbGwoJHZhbHVlLCAnLXByZWZpeC0nLCAkdmVuZG9yKX07XHJcbiAgICAgICAgfVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0Ly8gRXhwYW5kIGp1c3QgdGhlIHZhbHVlP1xyXG5cdFx0XHRAZWxzZWlmICRleHBhbmRWYWx1ZSB7XHJcbiAgICAgICAgQGVhY2ggJHZlbmRvciBpbiAkdmVuZG9yLXByZWZpeGVzIHtcclxuICAgICAgICAgICN7JHByb3BlcnR5fTogI3tzdHItcmVwbGFjZS1hbGwoJHZhbHVlLCAnLXByZWZpeC0nLCAkdmVuZG9yKX07XHJcbiAgICAgICAgfVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0Ly8gTmVpdGhlcj8gVHJlYXQgdGhlbSBhcyBhIG5vcm1hbCBkZWNsYXJhdGlvbi5cclxuXHRcdFx0QGVsc2Uge1xyXG4gICAgICAgICN7JHByb3BlcnR5fTogI3skdmFsdWV9O1xyXG5cdFx0XHR9XHJcblx0fSJdfQ== */
